using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsPhone.ImageUpdate.Tools.Common;

namespace Microsoft.WindowsPhone.ImageUpdate.OemCustomizationTool
{
	// Token: 0x0200000E RID: 14
	internal class RegFileWriter
	{
		// Token: 0x17000016 RID: 22
		// (get) Token: 0x06000041 RID: 65 RVA: 0x00004000 File Offset: 0x00002200
		private static string regFileHeader
		{
			get
			{
				string text = string.Empty;
				foreach (string str in Environment.GetCommandLineArgs())
				{
					text = text + str + " ";
				}
				return string.Concat(new string[]
				{
					"; Autogenerated OEM Customizations",
					Environment.NewLine,
					"; Command Line used to generate this file:",
					Environment.NewLine,
					";    ",
					text,
					Environment.NewLine
				});
			}
		}

		// Token: 0x06000042 RID: 66 RVA: 0x00004078 File Offset: 0x00002278
		private static List<RegValueInfo> RemoveDuplicates(List<RegValueInfo> values)
		{
			List<RegValueInfo> list = new List<RegValueInfo>();
			Dictionary<string, RegValueInfo> dictionary = new Dictionary<string, RegValueInfo>();
			foreach (RegValueInfo regValueInfo in values)
			{
				if (regValueInfo.ValueName != null)
				{
					RegValueInfo regValueInfo2 = null;
					if (dictionary.TryGetValue(regValueInfo.ValueName, out regValueInfo2))
					{
						TraceLogger.LogMessage(TraceLevel.Warn, string.Format("Registry conflict discovered: keyName: {0}, valueName: {1}, oldValue: {2}, newValue: {3}", new object[]
						{
							regValueInfo.KeyName,
							regValueInfo.ValueName,
							regValueInfo2.Value,
							regValueInfo.Value
						}), true);
						dictionary.Remove(regValueInfo.ValueName);
						list.Remove(regValueInfo2);
					}
					dictionary.Add(regValueInfo.ValueName, regValueInfo);
					list.Add(regValueInfo);
				}
			}
			return list;
		}

		// Token: 0x06000043 RID: 67 RVA: 0x00004154 File Offset: 0x00002354
		public static void Write(List<RegValueInfo> regValueInfoList, string regFilename)
		{
			List<RegValueInfo> list = new List<RegValueInfo>();
			foreach (IGrouping<string, RegValueInfo> source in from x in regValueInfoList
			group x by x.KeyName)
			{
				list.AddRange(RegFileWriter.RemoveDuplicates(source.ToList<RegValueInfo>()));
			}
			RegBuilder.Build(list, regFilename, RegFileWriter.regFileHeader);
		}
	}
}
